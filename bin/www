#!/usr/bin/env node

/*

 Copyright 2016 Viewpoint, Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */



var fs = require('fs');


var args = process.argv.slice(3);

if(args.length == 0) {
  if(process.env.projectorwwwconfig == null) {
    console.log("did not specify a config.json file on command-line or in projectorwwwconfig environment variable");
    process.exit(1);
  } else {
    args[0] = process.env.projectorwwwconfig;
  }
}

wwwConfig = {};

try {
  wwwConfig = JSON.parse(fs.readFileSync(args[0], 'utf8'));
}
catch (e) {
  console.log("failed loading config file: " + e.message);
  process.exit(2);
}

if(wwwConfig.modelStorageFile == null) {
  console.log("config file is missing the modelStorageFile property");
  process.exit(3);
}



/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('projector:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.argv[2] || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

